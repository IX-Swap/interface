/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent
} from './common'

export declare namespace IPayout {
  export type ClaimAuthorizationStruct = {
    operator: string
    user: string
    token: string
    payoutId: BytesLike
    amount: BigNumberish
    deadline: BigNumberish
    nonce: BigNumberish
    v: BigNumberish
    r: BytesLike
    s: BytesLike
  }

  export type ClaimAuthorizationStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    string
  ] & {
    operator: string
    user: string
    token: string
    payoutId: string
    amount: BigNumber
    deadline: BigNumber
    nonce: BigNumber
    v: number
    r: string
    s: string
  }

  export type InitAuthorizationStruct = {
    operator: string
    manager: string
    token: string
    payoutId: BytesLike
    payoutNonce: BigNumberish
    fund: BigNumberish
    startDate: BigNumberish
    endDate: BigNumberish
    v: BigNumberish
    r: BytesLike
    s: BytesLike
  }

  export type InitAuthorizationStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    string
  ] & {
    operator: string
    manager: string
    token: string
    payoutId: string
    payoutNonce: BigNumber
    fund: BigNumber
    startDate: BigNumber
    endDate: BigNumber
    v: number
    r: string
    s: string
  }
}

export interface PayoutInterface extends utils.Interface {
  functions: {
    'claim((address,address,address,bytes32,uint256,uint256,uint256,uint8,bytes32,bytes32))': FunctionFragment
    'forcedWithdraw(address,uint256,address)': FunctionFragment
    'grantRole(bytes32,address)': FunctionFragment
    'initPayout((address,address,address,bytes32,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32))': FunctionFragment
    'pause()': FunctionFragment
    'renounceRole(bytes32,address)': FunctionFragment
    'revokeRole(bytes32,address)': FunctionFragment
    'unpause()': FunctionFragment
    'CLAIM_TYPEHASH()': FunctionFragment
    'DEFAULT_ADMIN_ROLE()': FunctionFragment
    'DOMAIN_SEPARATOR()': FunctionFragment
    'getRoleAdmin(bytes32)': FunctionFragment
    'getRoleMember(bytes32,uint256)': FunctionFragment
    'getRoleMemberCount(bytes32)': FunctionFragment
    'hasRole(bytes32,address)': FunctionFragment
    'INIT_TYPEHASH()': FunctionFragment
    'nonce(bytes32,address)': FunctionFragment
    'numberPayouts()': FunctionFragment
    'OPERATOR_ROLE()': FunctionFragment
    'paused()': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'claim'
      | 'forcedWithdraw'
      | 'grantRole'
      | 'initPayout'
      | 'pause'
      | 'renounceRole'
      | 'revokeRole'
      | 'unpause'
      | 'CLAIM_TYPEHASH'
      | 'DEFAULT_ADMIN_ROLE'
      | 'DOMAIN_SEPARATOR'
      | 'getRoleAdmin'
      | 'getRoleMember'
      | 'getRoleMemberCount'
      | 'hasRole'
      | 'INIT_TYPEHASH'
      | 'nonce'
      | 'numberPayouts'
      | 'OPERATOR_ROLE'
      | 'paused'
      | 'supportsInterface'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'claim',
    values: [IPayout.ClaimAuthorizationStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'forcedWithdraw',
    values: [string, BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(
    functionFragment: 'initPayout',
    values: [IPayout.InitAuthorizationStruct]
  ): string
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'CLAIM_TYPEHASH',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'DOMAIN_SEPARATOR',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getRoleMember',
    values: [BytesLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getRoleMemberCount',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(
    functionFragment: 'INIT_TYPEHASH',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'nonce',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(
    functionFragment: 'numberPayouts',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'OPERATOR_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike]
  ): string

  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'forcedWithdraw',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initPayout', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'CLAIM_TYPEHASH',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'DOMAIN_SEPARATOR',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRoleMember',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRoleMemberCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'INIT_TYPEHASH',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'nonce', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'numberPayouts',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'OPERATOR_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result

  events: {
    'Claimed(uint256,address,bytes32,address,uint256,uint256)': EventFragment
    'ForcedWithdraw(address,uint256,address)': EventFragment
    'Initialized(bytes32,uint256,address,address,uint256,uint256,uint256)': EventFragment
    'Paused(address)': EventFragment
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment
    'RoleGranted(bytes32,address,address)': EventFragment
    'RoleRevoked(bytes32,address,address)': EventFragment
    'Unpaused(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Claimed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ForcedWithdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
}

export interface ClaimedEventObject {
  nonce: BigNumber
  user: string
  payoutId: string
  token: string
  amount: BigNumber
  date: BigNumber
}
export type ClaimedEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, BigNumber],
  ClaimedEventObject
>

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>

export interface ForcedWithdrawEventObject {
  token: string
  amount: BigNumber
  to: string
}
export type ForcedWithdrawEvent = TypedEvent<
  [string, BigNumber, string],
  ForcedWithdrawEventObject
>

export type ForcedWithdrawEventFilter = TypedEventFilter<ForcedWithdrawEvent>

export interface InitializedEventObject {
  payoutId: string
  payoutNonce: BigNumber
  manager: string
  token: string
  fund: BigNumber
  startDate: BigNumber
  endDate: BigNumber
}
export type InitializedEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  InitializedEventObject
>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface PausedEventObject {
  account: string
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export interface RoleAdminChangedEventObject {
  role: string
  previousAdminRole: string
  newAdminRole: string
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>

export interface RoleGrantedEventObject {
  role: string
  account: string
  sender: string
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>

export interface RoleRevokedEventObject {
  role: string
  account: string
  sender: string
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>

export interface UnpausedEventObject {
  account: string
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface Payout extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: PayoutInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    claim(
      authorization: IPayout.ClaimAuthorizationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    forcedWithdraw(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    initPayout(
      authorization: IPayout.InitAuthorizationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    CLAIM_TYPEHASH(overrides?: CallOverrides): Promise<[string]>

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    INIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>

    nonce(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    numberPayouts(overrides?: CallOverrides): Promise<[BigNumber]>

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>
  }

  claim(
    authorization: IPayout.ClaimAuthorizationStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  forcedWithdraw(
    token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  initPayout(
    authorization: IPayout.InitAuthorizationStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  CLAIM_TYPEHASH(overrides?: CallOverrides): Promise<string>

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  INIT_TYPEHASH(overrides?: CallOverrides): Promise<string>

  nonce(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  numberPayouts(overrides?: CallOverrides): Promise<BigNumber>

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>

  paused(overrides?: CallOverrides): Promise<boolean>

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>

  callStatic: {
    claim(
      authorization: IPayout.ClaimAuthorizationStruct,
      overrides?: CallOverrides
    ): Promise<void>

    forcedWithdraw(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>

    initPayout(
      authorization: IPayout.InitAuthorizationStruct,
      overrides?: CallOverrides
    ): Promise<void>

    pause(overrides?: CallOverrides): Promise<void>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>

    unpause(overrides?: CallOverrides): Promise<void>

    CLAIM_TYPEHASH(overrides?: CallOverrides): Promise<string>

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    INIT_TYPEHASH(overrides?: CallOverrides): Promise<string>

    nonce(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    numberPayouts(overrides?: CallOverrides): Promise<BigNumber>

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>

    paused(overrides?: CallOverrides): Promise<boolean>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>
  }

  filters: {
    'Claimed(uint256,address,bytes32,address,uint256,uint256)'(
      nonce?: BigNumberish | null,
      user?: string | null,
      payoutId?: BytesLike | null,
      token?: null,
      amount?: null,
      date?: null
    ): ClaimedEventFilter
    Claimed(
      nonce?: BigNumberish | null,
      user?: string | null,
      payoutId?: BytesLike | null,
      token?: null,
      amount?: null,
      date?: null
    ): ClaimedEventFilter

    'ForcedWithdraw(address,uint256,address)'(
      token?: null,
      amount?: null,
      to?: null
    ): ForcedWithdrawEventFilter
    ForcedWithdraw(
      token?: null,
      amount?: null,
      to?: null
    ): ForcedWithdrawEventFilter

    'Initialized(bytes32,uint256,address,address,uint256,uint256,uint256)'(
      payoutId?: BytesLike | null,
      payoutNonce?: BigNumberish | null,
      manager?: null,
      token?: null,
      fund?: null,
      startDate?: null,
      endDate?: null
    ): InitializedEventFilter
    Initialized(
      payoutId?: BytesLike | null,
      payoutNonce?: BigNumberish | null,
      manager?: null,
      token?: null,
      fund?: null,
      startDate?: null,
      endDate?: null
    ): InitializedEventFilter

    'Paused(address)'(account?: null): PausedEventFilter
    Paused(account?: null): PausedEventFilter

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter

    'Unpaused(address)'(account?: null): UnpausedEventFilter
    Unpaused(account?: null): UnpausedEventFilter
  }

  estimateGas: {
    claim(
      authorization: IPayout.ClaimAuthorizationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    forcedWithdraw(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    initPayout(
      authorization: IPayout.InitAuthorizationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    CLAIM_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    INIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>

    nonce(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    numberPayouts(overrides?: CallOverrides): Promise<BigNumber>

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    claim(
      authorization: IPayout.ClaimAuthorizationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    forcedWithdraw(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    initPayout(
      authorization: IPayout.InitAuthorizationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    CLAIM_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    INIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    nonce(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    numberPayouts(overrides?: CallOverrides): Promise<PopulatedTransaction>

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
