/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface IxsV2SwapRouterInterface extends ethers.utils.Interface {
  functions: {
    'WETH()': FunctionFragment
    'factory()': FunctionFragment
    'getAmountIn(uint256,uint256,uint256,bool)': FunctionFragment
    'getAmountOut(uint256,uint256,uint256,bool)': FunctionFragment
    'getAmountsIn(uint256,address[])': FunctionFragment
    'getAmountsOut(uint256,address[])': FunctionFragment
    'quote(uint256,uint256,uint256)': FunctionFragment
    'swapETHForExactTokens(uint256,address[],address,uint256,tuple[])': FunctionFragment
    'swapExactETHForTokens(uint256,address[],address,uint256,tuple[])': FunctionFragment
    'swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256,tuple[])': FunctionFragment
    'swapExactTokensForETH(uint256,uint256,address[],address,uint256,tuple[])': FunctionFragment
    'swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256,tuple[])': FunctionFragment
    'swapExactTokensForTokens(uint256,uint256,address[],address,uint256,tuple[])': FunctionFragment
    'swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256,tuple[])': FunctionFragment
    'swapTokensForExactETH(uint256,uint256,address[],address,uint256,tuple[])': FunctionFragment
    'swapTokensForExactTokens(uint256,uint256,address[],address,uint256,tuple[])': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'WETH', values?: undefined): string
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getAmountIn',
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'getAmountOut',
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'getAmountsIn',
    values: [BigNumberish, string[]]
  ): string
  encodeFunctionData(
    functionFragment: 'getAmountsOut',
    values: [BigNumberish, string[]]
  ): string
  encodeFunctionData(
    functionFragment: 'quote',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'swapETHForExactTokens',
    values: [
      BigNumberish,
      string[],
      string,
      BigNumberish,
      {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'swapExactETHForTokens',
    values: [
      BigNumberish,
      string[],
      string,
      BigNumberish,
      {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'swapExactETHForTokensSupportingFeeOnTransferTokens',
    values: [
      BigNumberish,
      string[],
      string,
      BigNumberish,
      {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'swapExactTokensForETH',
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'swapExactTokensForETHSupportingFeeOnTransferTokens',
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'swapExactTokensForTokens',
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'swapTokensForExactETH',
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'swapTokensForExactTokens',
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[]
    ]
  ): string

  decodeFunctionResult(functionFragment: 'WETH', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAmountIn', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getAmountOut',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAmountsIn',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAmountsOut',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'quote', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'swapETHForExactTokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapExactETHForTokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapExactETHForTokensSupportingFeeOnTransferTokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapExactTokensForETH',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapExactTokensForETHSupportingFeeOnTransferTokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapExactTokensForTokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapTokensForExactETH',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapTokensForExactTokens',
    data: BytesLike
  ): Result

  events: {}
}

export class IxsV2SwapRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: IxsV2SwapRouterInterface

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>

    factory(overrides?: CallOverrides): Promise<[string]>

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      isSecurityPool: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountIn: BigNumber }>

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      isSecurityPool: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountB: BigNumber }>

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  WETH(overrides?: CallOverrides): Promise<string>

  factory(overrides?: CallOverrides): Promise<string>

  getAmountIn(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    isSecurityPool: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getAmountOut(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    isSecurityPool: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getAmountsIn(
    amountOut: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>

  getAmountsOut(
    amountIn: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>

  quote(
    amountA: BigNumberish,
    reserveA: BigNumberish,
    reserveB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  swapETHForExactTokens(
    amountOut: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    authorizations: {
      operator: string
      deadline: BigNumberish
      v: BigNumberish
      r: BytesLike
      s: BytesLike
    }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapExactETHForTokens(
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    authorizations: {
      operator: string
      deadline: BigNumberish
      v: BigNumberish
      r: BytesLike
      s: BytesLike
    }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapExactETHForTokensSupportingFeeOnTransferTokens(
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    authorizations: {
      operator: string
      deadline: BigNumberish
      v: BigNumberish
      r: BytesLike
      s: BytesLike
    }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapExactTokensForETH(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    authorizations: {
      operator: string
      deadline: BigNumberish
      v: BigNumberish
      r: BytesLike
      s: BytesLike
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapExactTokensForETHSupportingFeeOnTransferTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    authorizations: {
      operator: string
      deadline: BigNumberish
      v: BigNumberish
      r: BytesLike
      s: BytesLike
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapExactTokensForTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    authorizations: {
      operator: string
      deadline: BigNumberish
      v: BigNumberish
      r: BytesLike
      s: BytesLike
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapExactTokensForTokensSupportingFeeOnTransferTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    authorizations: {
      operator: string
      deadline: BigNumberish
      v: BigNumberish
      r: BytesLike
      s: BytesLike
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapTokensForExactETH(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    authorizations: {
      operator: string
      deadline: BigNumberish
      v: BigNumberish
      r: BytesLike
      s: BytesLike
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapTokensForExactTokens(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    authorizations: {
      operator: string
      deadline: BigNumberish
      v: BigNumberish
      r: BytesLike
      s: BytesLike
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>

    factory(overrides?: CallOverrides): Promise<string>

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      isSecurityPool: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      isSecurityPool: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: CallOverrides
    ): Promise<void>

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: CallOverrides
    ): Promise<void>

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: CallOverrides
    ): Promise<void>

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>
  }

  filters: {}

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>

    factory(overrides?: CallOverrides): Promise<BigNumber>

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      isSecurityPool: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      isSecurityPool: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      isSecurityPool: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      isSecurityPool: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: {
        operator: string
        deadline: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
