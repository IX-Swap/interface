/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent
} from './common'

export declare namespace IIxsSale {
  export type LaunchSaleStruct = {
    controller: string
    initiator: string
    paymentToken: string
    rate: BigNumberish
    feePercent: BigNumberish
    caps: [BigNumberish, BigNumberish, BigNumberish]
    deadlines: [BigNumberish, BigNumberish, BigNumberish]
    investLimits: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    tokenMinted: boolean
  }

  export type LaunchSaleStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber, BigNumber],
    [BigNumber, BigNumber, BigNumber],
    [BigNumber, BigNumber, BigNumber, BigNumber],
    boolean
  ] & {
    controller: string
    initiator: string
    paymentToken: string
    rate: BigNumber
    feePercent: BigNumber
    caps: [BigNumber, BigNumber, BigNumber]
    deadlines: [BigNumber, BigNumber, BigNumber]
    investLimits: [BigNumber, BigNumber, BigNumber, BigNumber]
    tokenMinted: boolean
  }

  export type InvestStructStruct = {
    to: string
    nonce: BigNumberish
    deadline: BigNumberish
    v: BigNumberish
    r: BytesLike
    s: BytesLike
  }

  export type InvestStructStructOutput = [
    string,
    BigNumber,
    BigNumber,
    number,
    string,
    string
  ] & {
    to: string
    nonce: BigNumber
    deadline: BigNumber
    v: number
    r: string
    s: string
  }
}

export interface LaunchpadInvestmentInterface extends utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment
    'DOMAIN_SEPARATOR()': FunctionFragment
    'INVEST_TYPEHASH()': FunctionFragment
    'OPERATOR_ROLE()': FunctionFragment
    'WETH()': FunctionFragment
    'batchClaim(uint256,address[])': FunctionFragment
    'claim(uint256,address)': FunctionFragment
    'feeRecipient()': FunctionFragment
    'forceFinalize(uint256)': FunctionFragment
    'forceWithdraw(address,address,uint256)': FunctionFragment
    'getAmountOut(uint256,uint256)': FunctionFragment
    'getOnSales(uint256)': FunctionFragment
    'getRoleAdmin(bytes32)': FunctionFragment
    'grantRole(bytes32,address)': FunctionFragment
    'hasRole(bytes32,address)': FunctionFragment
    'investAmounts(uint256,address)': FunctionFragment
    'investPreSale(uint256,uint256,bytes32[])': FunctionFragment
    'investPublicSale(uint256,uint256,(address,uint256,uint256,uint8,bytes32,bytes32))': FunctionFragment
    'launchSale((address,address,address,uint256,uint256,uint256[3],uint256[3],uint256[4],bool))': FunctionFragment
    'onSaleInvests(uint256)': FunctionFragment
    'renounceRole(bytes32,address)': FunctionFragment
    'revokeRole(bytes32,address)': FunctionFragment
    'saleNonce()': FunctionFragment
    'setNewDeadline(uint256,uint8,uint256)': FunctionFragment
    'setWhitelistRoot(uint256,bytes32)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'treasury()': FunctionFragment
    'userNonce(address)': FunctionFragment
    'withdrawIssuer(uint256)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_ADMIN_ROLE'
      | 'DOMAIN_SEPARATOR'
      | 'INVEST_TYPEHASH'
      | 'OPERATOR_ROLE'
      | 'WETH'
      | 'batchClaim'
      | 'claim'
      | 'feeRecipient'
      | 'forceFinalize'
      | 'forceWithdraw'
      | 'getAmountOut'
      | 'getOnSales'
      | 'getRoleAdmin'
      | 'grantRole'
      | 'hasRole'
      | 'investAmounts'
      | 'investPreSale'
      | 'investPublicSale'
      | 'launchSale'
      | 'onSaleInvests'
      | 'renounceRole'
      | 'revokeRole'
      | 'saleNonce'
      | 'setNewDeadline'
      | 'setWhitelistRoot'
      | 'supportsInterface'
      | 'treasury'
      | 'userNonce'
      | 'withdrawIssuer'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'DOMAIN_SEPARATOR',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'INVEST_TYPEHASH',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'OPERATOR_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'WETH', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'batchClaim',
    values: [BigNumberish, string[]]
  ): string
  encodeFunctionData(
    functionFragment: 'claim',
    values: [BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'feeRecipient',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'forceFinalize',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'forceWithdraw',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getAmountOut',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getOnSales',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(
    functionFragment: 'investAmounts',
    values: [BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'investPreSale',
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string
  encodeFunctionData(
    functionFragment: 'investPublicSale',
    values: [BigNumberish, BigNumberish, IIxsSale.InvestStructStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'launchSale',
    values: [IIxsSale.LaunchSaleStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'onSaleInvests',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(functionFragment: 'saleNonce', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'setNewDeadline',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setWhitelistRoot',
    values: [BigNumberish, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string
  encodeFunctionData(functionFragment: 'userNonce', values: [string]): string
  encodeFunctionData(
    functionFragment: 'withdrawIssuer',
    values: [BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'DOMAIN_SEPARATOR',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'INVEST_TYPEHASH',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'OPERATOR_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'WETH', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'batchClaim', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'feeRecipient',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'forceFinalize',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'forceWithdraw',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAmountOut',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getOnSales', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'investAmounts',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'investPreSale',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'investPublicSale',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'launchSale', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'onSaleInvests',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'saleNonce', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setNewDeadline',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setWhitelistRoot',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'userNonce', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'withdrawIssuer',
    data: BytesLike
  ): Result

  events: {
    'BatchClaim(uint256,address[])': EventFragment
    'Claim(uint256,uint256,address,address,address)': EventFragment
    'ForceFinalize(uint256,address)': EventFragment
    'ForceWithdraw(address,uint256,address,address)': EventFragment
    'InvestPreSale(uint256,uint256,address,address)': EventFragment
    'InvestPublicSale(uint256,uint256,address,address)': EventFragment
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment
    'RoleGranted(bytes32,address,address)': EventFragment
    'RoleRevoked(bytes32,address,address)': EventFragment
    'StartSale(uint256)': EventFragment
    'WithdrawIssuer(address,uint256,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'BatchClaim'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Claim'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ForceFinalize'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ForceWithdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'InvestPreSale'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'InvestPublicSale'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'StartSale'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WithdrawIssuer'): EventFragment
}

export interface BatchClaimEventObject {
  saleId: BigNumber
  receivers: string[]
}
export type BatchClaimEvent = TypedEvent<
  [BigNumber, string[]],
  BatchClaimEventObject
>

export type BatchClaimEventFilter = TypedEventFilter<BatchClaimEvent>

export interface ClaimEventObject {
  saleId: BigNumber
  amount: BigNumber
  paymentToken: string
  to: string
  sender: string
}
export type ClaimEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, string],
  ClaimEventObject
>

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>

export interface ForceFinalizeEventObject {
  saleId: BigNumber
  finalizer: string
}
export type ForceFinalizeEvent = TypedEvent<
  [BigNumber, string],
  ForceFinalizeEventObject
>

export type ForceFinalizeEventFilter = TypedEventFilter<ForceFinalizeEvent>

export interface ForceWithdrawEventObject {
  paymentToken: string
  amount: BigNumber
  to: string
  sender: string
}
export type ForceWithdrawEvent = TypedEvent<
  [string, BigNumber, string, string],
  ForceWithdrawEventObject
>

export type ForceWithdrawEventFilter = TypedEventFilter<ForceWithdrawEvent>

export interface InvestPreSaleEventObject {
  saleId: BigNumber
  amount: BigNumber
  paymentToken: string
  buyer: string
}
export type InvestPreSaleEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  InvestPreSaleEventObject
>

export type InvestPreSaleEventFilter = TypedEventFilter<InvestPreSaleEvent>

export interface InvestPublicSaleEventObject {
  saleId: BigNumber
  amount: BigNumber
  paymentToken: string
  buyer: string
}
export type InvestPublicSaleEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  InvestPublicSaleEventObject
>

export type InvestPublicSaleEventFilter =
  TypedEventFilter<InvestPublicSaleEvent>

export interface RoleAdminChangedEventObject {
  role: string
  previousAdminRole: string
  newAdminRole: string
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>

export interface RoleGrantedEventObject {
  role: string
  account: string
  sender: string
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>

export interface RoleRevokedEventObject {
  role: string
  account: string
  sender: string
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>

export interface StartSaleEventObject {
  saleId: BigNumber
}
export type StartSaleEvent = TypedEvent<[BigNumber], StartSaleEventObject>

export type StartSaleEventFilter = TypedEventFilter<StartSaleEvent>

export interface WithdrawIssuerEventObject {
  investToken: string
  amount: BigNumber
  issuer: string
}
export type WithdrawIssuerEvent = TypedEvent<
  [string, BigNumber, string],
  WithdrawIssuerEventObject
>

export type WithdrawIssuerEventFilter = TypedEventFilter<WithdrawIssuerEvent>

export interface LaunchpadInvestment extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: LaunchpadInvestmentInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>

    INVEST_TYPEHASH(overrides?: CallOverrides): Promise<[string]>

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>

    WETH(overrides?: CallOverrides): Promise<[string]>

    batchClaim(
      _saleId: BigNumberish,
      _receiver: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    claim(
      _saleId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    feeRecipient(overrides?: CallOverrides): Promise<[string]>

    forceFinalize(
      _saleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    forceWithdraw(
      _tokenAddr: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getAmountOut(
      _saleId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amountOut: BigNumber }>

    getOnSales(
      _saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IIxsSale.LaunchSaleStructOutput]>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    investAmounts(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountPreSale: BigNumber
        amountPubSale: BigNumber
      }
    >

    investPreSale(
      _saleId: BigNumberish,
      _amount: BigNumberish,
      _membershipProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    investPublicSale(
      _saleId: BigNumberish,
      _amount: BigNumberish,
      _investData: IIxsSale.InvestStructStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    launchSale(
      launchSaleData: IIxsSale.LaunchSaleStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    onSaleInvests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, boolean, boolean] & {
        dealBalance: BigNumber
        whitelistRoot: string
        userClaimed: BigNumber
        issuerClaimed: boolean
        forceFinalize: boolean
      }
    >

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    saleNonce(overrides?: CallOverrides): Promise<[BigNumber]>

    setNewDeadline(
      _saleId: BigNumberish,
      index: BigNumberish,
      newTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setWhitelistRoot(
      _saleId: BigNumberish,
      _whitelistRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    treasury(overrides?: CallOverrides): Promise<[string]>

    userNonce(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    withdrawIssuer(
      _saleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>

  INVEST_TYPEHASH(overrides?: CallOverrides): Promise<string>

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>

  WETH(overrides?: CallOverrides): Promise<string>

  batchClaim(
    _saleId: BigNumberish,
    _receiver: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  claim(
    _saleId: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  feeRecipient(overrides?: CallOverrides): Promise<string>

  forceFinalize(
    _saleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  forceWithdraw(
    _tokenAddr: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getAmountOut(
    _saleId: BigNumberish,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getOnSales(
    _saleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IIxsSale.LaunchSaleStructOutput>

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  investAmounts(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      amountPreSale: BigNumber
      amountPubSale: BigNumber
    }
  >

  investPreSale(
    _saleId: BigNumberish,
    _amount: BigNumberish,
    _membershipProof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  investPublicSale(
    _saleId: BigNumberish,
    _amount: BigNumberish,
    _investData: IIxsSale.InvestStructStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  launchSale(
    launchSaleData: IIxsSale.LaunchSaleStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  onSaleInvests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, boolean, boolean] & {
      dealBalance: BigNumber
      whitelistRoot: string
      userClaimed: BigNumber
      issuerClaimed: boolean
      forceFinalize: boolean
    }
  >

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  saleNonce(overrides?: CallOverrides): Promise<BigNumber>

  setNewDeadline(
    _saleId: BigNumberish,
    index: BigNumberish,
    newTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setWhitelistRoot(
    _saleId: BigNumberish,
    _whitelistRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>

  treasury(overrides?: CallOverrides): Promise<string>

  userNonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  withdrawIssuer(
    _saleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>

    INVEST_TYPEHASH(overrides?: CallOverrides): Promise<string>

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>

    WETH(overrides?: CallOverrides): Promise<string>

    batchClaim(
      _saleId: BigNumberish,
      _receiver: string[],
      overrides?: CallOverrides
    ): Promise<void>

    claim(
      _saleId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>

    feeRecipient(overrides?: CallOverrides): Promise<string>

    forceFinalize(
      _saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    forceWithdraw(
      _tokenAddr: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    getAmountOut(
      _saleId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getOnSales(
      _saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IIxsSale.LaunchSaleStructOutput>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    investAmounts(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountPreSale: BigNumber
        amountPubSale: BigNumber
      }
    >

    investPreSale(
      _saleId: BigNumberish,
      _amount: BigNumberish,
      _membershipProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>

    investPublicSale(
      _saleId: BigNumberish,
      _amount: BigNumberish,
      _investData: IIxsSale.InvestStructStruct,
      overrides?: CallOverrides
    ): Promise<void>

    launchSale(
      launchSaleData: IIxsSale.LaunchSaleStruct,
      overrides?: CallOverrides
    ): Promise<void>

    onSaleInvests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, boolean, boolean] & {
        dealBalance: BigNumber
        whitelistRoot: string
        userClaimed: BigNumber
        issuerClaimed: boolean
        forceFinalize: boolean
      }
    >

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>

    saleNonce(overrides?: CallOverrides): Promise<BigNumber>

    setNewDeadline(
      _saleId: BigNumberish,
      index: BigNumberish,
      newTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setWhitelistRoot(
      _saleId: BigNumberish,
      _whitelistRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>

    treasury(overrides?: CallOverrides): Promise<string>

    userNonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    withdrawIssuer(
      _saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    'BatchClaim(uint256,address[])'(
      saleId?: null,
      receivers?: null
    ): BatchClaimEventFilter
    BatchClaim(saleId?: null, receivers?: null): BatchClaimEventFilter

    'Claim(uint256,uint256,address,address,address)'(
      saleId?: null,
      amount?: null,
      paymentToken?: null,
      to?: null,
      sender?: null
    ): ClaimEventFilter
    Claim(
      saleId?: null,
      amount?: null,
      paymentToken?: null,
      to?: null,
      sender?: null
    ): ClaimEventFilter

    'ForceFinalize(uint256,address)'(
      saleId?: null,
      finalizer?: null
    ): ForceFinalizeEventFilter
    ForceFinalize(saleId?: null, finalizer?: null): ForceFinalizeEventFilter

    'ForceWithdraw(address,uint256,address,address)'(
      paymentToken?: null,
      amount?: null,
      to?: null,
      sender?: null
    ): ForceWithdrawEventFilter
    ForceWithdraw(
      paymentToken?: null,
      amount?: null,
      to?: null,
      sender?: null
    ): ForceWithdrawEventFilter

    'InvestPreSale(uint256,uint256,address,address)'(
      saleId?: null,
      amount?: null,
      paymentToken?: null,
      buyer?: null
    ): InvestPreSaleEventFilter
    InvestPreSale(
      saleId?: null,
      amount?: null,
      paymentToken?: null,
      buyer?: null
    ): InvestPreSaleEventFilter

    'InvestPublicSale(uint256,uint256,address,address)'(
      saleId?: null,
      amount?: null,
      paymentToken?: null,
      buyer?: null
    ): InvestPublicSaleEventFilter
    InvestPublicSale(
      saleId?: null,
      amount?: null,
      paymentToken?: null,
      buyer?: null
    ): InvestPublicSaleEventFilter

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter

    'StartSale(uint256)'(saleId?: null): StartSaleEventFilter
    StartSale(saleId?: null): StartSaleEventFilter

    'WithdrawIssuer(address,uint256,address)'(
      investToken?: null,
      amount?: null,
      issuer?: null
    ): WithdrawIssuerEventFilter
    WithdrawIssuer(
      investToken?: null,
      amount?: null,
      issuer?: null
    ): WithdrawIssuerEventFilter
  }

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>

    INVEST_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    WETH(overrides?: CallOverrides): Promise<BigNumber>

    batchClaim(
      _saleId: BigNumberish,
      _receiver: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    claim(
      _saleId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>

    forceFinalize(
      _saleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    forceWithdraw(
      _tokenAddr: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getAmountOut(
      _saleId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getOnSales(
      _saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    investAmounts(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    investPreSale(
      _saleId: BigNumberish,
      _amount: BigNumberish,
      _membershipProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    investPublicSale(
      _saleId: BigNumberish,
      _amount: BigNumberish,
      _investData: IIxsSale.InvestStructStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    launchSale(
      launchSaleData: IIxsSale.LaunchSaleStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    onSaleInvests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    saleNonce(overrides?: CallOverrides): Promise<BigNumber>

    setNewDeadline(
      _saleId: BigNumberish,
      index: BigNumberish,
      newTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setWhitelistRoot(
      _saleId: BigNumberish,
      _whitelistRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    treasury(overrides?: CallOverrides): Promise<BigNumber>

    userNonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    withdrawIssuer(
      _saleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>

    INVEST_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    batchClaim(
      _saleId: BigNumberish,
      _receiver: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    claim(
      _saleId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>

    forceFinalize(
      _saleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    forceWithdraw(
      _tokenAddr: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getAmountOut(
      _saleId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getOnSales(
      _saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    investAmounts(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    investPreSale(
      _saleId: BigNumberish,
      _amount: BigNumberish,
      _membershipProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    investPublicSale(
      _saleId: BigNumberish,
      _amount: BigNumberish,
      _investData: IIxsSale.InvestStructStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    launchSale(
      launchSaleData: IIxsSale.LaunchSaleStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    onSaleInvests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    saleNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setNewDeadline(
      _saleId: BigNumberish,
      index: BigNumberish,
      newTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setWhitelistRoot(
      _saleId: BigNumberish,
      _whitelistRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>

    userNonce(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    withdrawIssuer(
      _saleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
