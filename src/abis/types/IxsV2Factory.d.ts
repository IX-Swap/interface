/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface IxsV2FactoryInterface extends ethers.utils.Interface {
  functions: {
    'allPairs(uint256)': FunctionFragment
    'allPairsLength()': FunctionFragment
    'createPair(address,address,bool)': FunctionFragment
    'defaultOracleStrategy()': FunctionFragment
    'feeTo()': FunctionFragment
    'feeToSetter()': FunctionFragment
    'getPair(address,address)': FunctionFragment
    'isPair(address)': FunctionFragment
    'oracle()': FunctionFragment
    'oracleCanConsult(address,address)': FunctionFragment
    'oracleConsult(address,uint256,address)': FunctionFragment
    'oracleUpdate(address,address)': FunctionFragment
    'oracles(bytes32)': FunctionFragment
    'pairBytecodeProvider()': FunctionFragment
    'secFeeTo()': FunctionFragment
    'setFeeTo(address)': FunctionFragment
    'setFeeToSetter(address)': FunctionFragment
    'setOracle(address,bytes32)': FunctionFragment
    'setOracleStrategy(bytes32)': FunctionFragment
    'setSecFeeTo(address)': FunctionFragment
    'setWSecFactory(address)': FunctionFragment
    'wSecFactory()': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'allPairs',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'allPairsLength',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'createPair',
    values: [string, string, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'defaultOracleStrategy',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'feeTo', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'feeToSetter',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getPair',
    values: [string, string]
  ): string
  encodeFunctionData(functionFragment: 'isPair', values: [string]): string
  encodeFunctionData(functionFragment: 'oracle', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'oracleCanConsult',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'oracleConsult',
    values: [string, BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'oracleUpdate',
    values: [string, string]
  ): string
  encodeFunctionData(functionFragment: 'oracles', values: [BytesLike]): string
  encodeFunctionData(
    functionFragment: 'pairBytecodeProvider',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'secFeeTo', values?: undefined): string
  encodeFunctionData(functionFragment: 'setFeeTo', values: [string]): string
  encodeFunctionData(
    functionFragment: 'setFeeToSetter',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'setOracle',
    values: [string, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'setOracleStrategy',
    values: [BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'setSecFeeTo', values: [string]): string
  encodeFunctionData(
    functionFragment: 'setWSecFactory',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'wSecFactory',
    values?: undefined
  ): string

  decodeFunctionResult(functionFragment: 'allPairs', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'allPairsLength',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'createPair', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'defaultOracleStrategy',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'feeTo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'feeToSetter', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPair', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isPair', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'oracle', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'oracleCanConsult',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'oracleConsult',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'oracleUpdate',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'oracles', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'pairBytecodeProvider',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'secFeeTo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setFeeTo', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setFeeToSetter',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setOracle', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setOracleStrategy',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setSecFeeTo', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setWSecFactory',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'wSecFactory', data: BytesLike): Result

  events: {
    'OracleUpdated(address,address,address)': EventFragment
    'PairCreated(address,address,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OracleUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PairCreated'): EventFragment
}

export type OracleUpdatedEvent = TypedEvent<
  [string, string, string] & { oracle: string; tokenA: string; tokenB: string }
>

export type PairCreatedEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    token0: string
    token1: string
    pair: string
    arg3: BigNumber
  }
>

export class IxsV2Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: IxsV2FactoryInterface

  functions: {
    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    allPairsLength(overrides?: CallOverrides): Promise<[BigNumber]>

    createPair(
      tokenA: string,
      tokenB: string,
      forceEnableMitigation: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    defaultOracleStrategy(overrides?: CallOverrides): Promise<[string]>

    feeTo(overrides?: CallOverrides): Promise<[string]>

    feeToSetter(overrides?: CallOverrides): Promise<[string]>

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    isPair(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

    oracle(overrides?: CallOverrides): Promise<[string]>

    oracleCanConsult(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    oracleConsult(
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>

    oracleUpdate(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    oracles(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>

    pairBytecodeProvider(overrides?: CallOverrides): Promise<[string]>

    secFeeTo(overrides?: CallOverrides): Promise<[string]>

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setOracle(
      _oracle: string,
      _strategy: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setOracleStrategy(
      strategy: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setSecFeeTo(
      _secFeeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setWSecFactory(
      _wSecFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    wSecFactory(overrides?: CallOverrides): Promise<[string]>
  }

  allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  allPairsLength(overrides?: CallOverrides): Promise<BigNumber>

  createPair(
    tokenA: string,
    tokenB: string,
    forceEnableMitigation: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  defaultOracleStrategy(overrides?: CallOverrides): Promise<string>

  feeTo(overrides?: CallOverrides): Promise<string>

  feeToSetter(overrides?: CallOverrides): Promise<string>

  getPair(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>

  isPair(arg0: string, overrides?: CallOverrides): Promise<boolean>

  oracle(overrides?: CallOverrides): Promise<string>

  oracleCanConsult(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  oracleConsult(
    tokenIn: string,
    amountIn: BigNumberish,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  oracleUpdate(
    tokenA: string,
    tokenB: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  oracles(arg0: BytesLike, overrides?: CallOverrides): Promise<string>

  pairBytecodeProvider(overrides?: CallOverrides): Promise<string>

  secFeeTo(overrides?: CallOverrides): Promise<string>

  setFeeTo(
    _feeTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setFeeToSetter(
    _feeToSetter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setOracle(
    _oracle: string,
    _strategy: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setOracleStrategy(
    strategy: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setSecFeeTo(
    _secFeeTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setWSecFactory(
    _wSecFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  wSecFactory(overrides?: CallOverrides): Promise<string>

  callStatic: {
    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>

    createPair(
      tokenA: string,
      tokenB: string,
      forceEnableMitigation: boolean,
      overrides?: CallOverrides
    ): Promise<string>

    defaultOracleStrategy(overrides?: CallOverrides): Promise<string>

    feeTo(overrides?: CallOverrides): Promise<string>

    feeToSetter(overrides?: CallOverrides): Promise<string>

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>

    isPair(arg0: string, overrides?: CallOverrides): Promise<boolean>

    oracle(overrides?: CallOverrides): Promise<string>

    oracleCanConsult(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    oracleConsult(
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    oracleUpdate(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<void>

    oracles(arg0: BytesLike, overrides?: CallOverrides): Promise<string>

    pairBytecodeProvider(overrides?: CallOverrides): Promise<string>

    secFeeTo(overrides?: CallOverrides): Promise<string>

    setFeeTo(_feeTo: string, overrides?: CallOverrides): Promise<void>

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: CallOverrides
    ): Promise<void>

    setOracle(
      _oracle: string,
      _strategy: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    setOracleStrategy(
      strategy: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    setSecFeeTo(_secFeeTo: string, overrides?: CallOverrides): Promise<void>

    setWSecFactory(
      _wSecFactory: string,
      overrides?: CallOverrides
    ): Promise<void>

    wSecFactory(overrides?: CallOverrides): Promise<string>
  }

  filters: {
    'OracleUpdated(address,address,address)'(
      oracle?: string | null,
      tokenA?: string | null,
      tokenB?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { oracle: string; tokenA: string; tokenB: string }
    >

    OracleUpdated(
      oracle?: string | null,
      tokenA?: string | null,
      tokenB?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { oracle: string; tokenA: string; tokenB: string }
    >

    'PairCreated(address,address,address,uint256)'(
      token0?: string | null,
      token1?: string | null,
      pair?: null,
      undefined?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { token0: string; token1: string; pair: string; arg3: BigNumber }
    >

    PairCreated(
      token0?: string | null,
      token1?: string | null,
      pair?: null,
      undefined?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { token0: string; token1: string; pair: string; arg3: BigNumber }
    >
  }

  estimateGas: {
    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>

    createPair(
      tokenA: string,
      tokenB: string,
      forceEnableMitigation: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    defaultOracleStrategy(overrides?: CallOverrides): Promise<BigNumber>

    feeTo(overrides?: CallOverrides): Promise<BigNumber>

    feeToSetter(overrides?: CallOverrides): Promise<BigNumber>

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isPair(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    oracle(overrides?: CallOverrides): Promise<BigNumber>

    oracleCanConsult(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    oracleConsult(
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    oracleUpdate(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    oracles(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    pairBytecodeProvider(overrides?: CallOverrides): Promise<BigNumber>

    secFeeTo(overrides?: CallOverrides): Promise<BigNumber>

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setOracle(
      _oracle: string,
      _strategy: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setOracleStrategy(
      strategy: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setSecFeeTo(
      _secFeeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setWSecFactory(
      _wSecFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    wSecFactory(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    allPairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    allPairsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>

    createPair(
      tokenA: string,
      tokenB: string,
      forceEnableMitigation: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    defaultOracleStrategy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>

    feeToSetter(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isPair(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>

    oracleCanConsult(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    oracleConsult(
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    oracleUpdate(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    oracles(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    pairBytecodeProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    secFeeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setOracle(
      _oracle: string,
      _strategy: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setOracleStrategy(
      strategy: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setSecFeeTo(
      _secFeeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setWSecFactory(
      _wSecFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    wSecFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
