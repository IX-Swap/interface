/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent
} from './common'

export declare namespace IIxsV2Pair {
  export type SecAuthorizationStruct = {
    operator: string
    deadline: BigNumberish
    v: BigNumberish
    r: BytesLike
    s: BytesLike
  }

  export type SecAuthorizationStructOutput = [
    string,
    BigNumber,
    number,
    string,
    string
  ] & {
    operator: string
    deadline: BigNumber
    v: number
    r: string
    s: string
  }
}

export interface IxsV2SwapRouterInterface extends utils.Interface {
  functions: {
    'WETH()': FunctionFragment
    'factory()': FunctionFragment
    'getAmountIn(uint256,uint256,uint256,bool)': FunctionFragment
    'getAmountOut(uint256,uint256,uint256,bool)': FunctionFragment
    'getAmountsIn(uint256,address[])': FunctionFragment
    'getAmountsOut(uint256,address[])': FunctionFragment
    'quote(uint256,uint256,uint256)': FunctionFragment
    'swapETHForExactTokens(uint256,address[],address,uint256,(address,uint256,uint8,bytes32,bytes32)[])': FunctionFragment
    'swapExactETHForTokens(uint256,address[],address,uint256,(address,uint256,uint8,bytes32,bytes32)[])': FunctionFragment
    'swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256,(address,uint256,uint8,bytes32,bytes32)[])': FunctionFragment
    'swapExactTokensForETH(uint256,uint256,address[],address,uint256,(address,uint256,uint8,bytes32,bytes32)[])': FunctionFragment
    'swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256,(address,uint256,uint8,bytes32,bytes32)[])': FunctionFragment
    'swapExactTokensForTokens(uint256,uint256,address[],address,uint256,(address,uint256,uint8,bytes32,bytes32)[])': FunctionFragment
    'swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256,(address,uint256,uint8,bytes32,bytes32)[])': FunctionFragment
    'swapTokensForExactETH(uint256,uint256,address[],address,uint256,(address,uint256,uint8,bytes32,bytes32)[])': FunctionFragment
    'swapTokensForExactTokens(uint256,uint256,address[],address,uint256,(address,uint256,uint8,bytes32,bytes32)[])': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'WETH'
      | 'factory'
      | 'getAmountIn'
      | 'getAmountOut'
      | 'getAmountsIn'
      | 'getAmountsOut'
      | 'quote'
      | 'swapETHForExactTokens'
      | 'swapExactETHForTokens'
      | 'swapExactETHForTokensSupportingFeeOnTransferTokens'
      | 'swapExactTokensForETH'
      | 'swapExactTokensForETHSupportingFeeOnTransferTokens'
      | 'swapExactTokensForTokens'
      | 'swapExactTokensForTokensSupportingFeeOnTransferTokens'
      | 'swapTokensForExactETH'
      | 'swapTokensForExactTokens'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'WETH', values?: undefined): string
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getAmountIn',
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'getAmountOut',
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'getAmountsIn',
    values: [BigNumberish, string[]]
  ): string
  encodeFunctionData(
    functionFragment: 'getAmountsOut',
    values: [BigNumberish, string[]]
  ): string
  encodeFunctionData(
    functionFragment: 'quote',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'swapETHForExactTokens',
    values: [
      BigNumberish,
      string[],
      string,
      BigNumberish,
      IIxsV2Pair.SecAuthorizationStruct[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'swapExactETHForTokens',
    values: [
      BigNumberish,
      string[],
      string,
      BigNumberish,
      IIxsV2Pair.SecAuthorizationStruct[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'swapExactETHForTokensSupportingFeeOnTransferTokens',
    values: [
      BigNumberish,
      string[],
      string,
      BigNumberish,
      IIxsV2Pair.SecAuthorizationStruct[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'swapExactTokensForETH',
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      IIxsV2Pair.SecAuthorizationStruct[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'swapExactTokensForETHSupportingFeeOnTransferTokens',
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      IIxsV2Pair.SecAuthorizationStruct[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'swapExactTokensForTokens',
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      IIxsV2Pair.SecAuthorizationStruct[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      IIxsV2Pair.SecAuthorizationStruct[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'swapTokensForExactETH',
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      IIxsV2Pair.SecAuthorizationStruct[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'swapTokensForExactTokens',
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      IIxsV2Pair.SecAuthorizationStruct[]
    ]
  ): string

  decodeFunctionResult(functionFragment: 'WETH', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAmountIn', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getAmountOut',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAmountsIn',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAmountsOut',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'quote', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'swapETHForExactTokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapExactETHForTokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapExactETHForTokensSupportingFeeOnTransferTokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapExactTokensForETH',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapExactTokensForETHSupportingFeeOnTransferTokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapExactTokensForTokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapTokensForExactETH',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapTokensForExactTokens',
    data: BytesLike
  ): Result

  events: {}
}

export interface IxsV2SwapRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: IxsV2SwapRouterInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>

    factory(overrides?: CallOverrides): Promise<[string]>

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      isSecurityPool: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountIn: BigNumber }>

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      isSecurityPool: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountB: BigNumber }>

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  WETH(overrides?: CallOverrides): Promise<string>

  factory(overrides?: CallOverrides): Promise<string>

  getAmountIn(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    isSecurityPool: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getAmountOut(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    isSecurityPool: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getAmountsIn(
    amountOut: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>

  getAmountsOut(
    amountIn: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>

  quote(
    amountA: BigNumberish,
    reserveA: BigNumberish,
    reserveB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  swapETHForExactTokens(
    amountOut: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    authorizations: IIxsV2Pair.SecAuthorizationStruct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapExactETHForTokens(
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    authorizations: IIxsV2Pair.SecAuthorizationStruct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapExactETHForTokensSupportingFeeOnTransferTokens(
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    authorizations: IIxsV2Pair.SecAuthorizationStruct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapExactTokensForETH(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    authorizations: IIxsV2Pair.SecAuthorizationStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapExactTokensForETHSupportingFeeOnTransferTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    authorizations: IIxsV2Pair.SecAuthorizationStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapExactTokensForTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    authorizations: IIxsV2Pair.SecAuthorizationStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapExactTokensForTokensSupportingFeeOnTransferTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    authorizations: IIxsV2Pair.SecAuthorizationStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapTokensForExactETH(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    authorizations: IIxsV2Pair.SecAuthorizationStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapTokensForExactTokens(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    authorizations: IIxsV2Pair.SecAuthorizationStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>

    factory(overrides?: CallOverrides): Promise<string>

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      isSecurityPool: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      isSecurityPool: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: CallOverrides
    ): Promise<void>

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: CallOverrides
    ): Promise<void>

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: CallOverrides
    ): Promise<void>

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>
  }

  filters: {}

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>

    factory(overrides?: CallOverrides): Promise<BigNumber>

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      isSecurityPool: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      isSecurityPool: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      isSecurityPool: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      isSecurityPool: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    swapETHForExactTokens(
      amountOut: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapTokensForExactETH(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      authorizations: IIxsV2Pair.SecAuthorizationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
