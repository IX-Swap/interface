/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface PayoutInterface extends ethers.utils.Interface {
  functions: {
    'claim((address,address,address,bytes32,uint256,uint256,uint256,uint8,bytes32,bytes32))': FunctionFragment
    'forcedWithdraw(address,uint256,address)': FunctionFragment
    'grantRole(bytes32,address)': FunctionFragment
    'initPayout((address,address,address,bytes32,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32))': FunctionFragment
    'pause()': FunctionFragment
    'renounceRole(bytes32,address)': FunctionFragment
    'revokeRole(bytes32,address)': FunctionFragment
    'unpause()': FunctionFragment
    'CLAIM_TYPEHASH()': FunctionFragment
    'DEFAULT_ADMIN_ROLE()': FunctionFragment
    'DOMAIN_SEPARATOR()': FunctionFragment
    'getRoleAdmin(bytes32)': FunctionFragment
    'getRoleMember(bytes32,uint256)': FunctionFragment
    'getRoleMemberCount(bytes32)': FunctionFragment
    'hasRole(bytes32,address)': FunctionFragment
    'INIT_TYPEHASH()': FunctionFragment
    'nonce(bytes32,address)': FunctionFragment
    'numberPayouts()': FunctionFragment
    'OPERATOR_ROLE()': FunctionFragment
    'paused()': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'claim',
    values: [
      {
        operator: string
        user: string
        token: string
        payoutId: BytesLike
        amount: BigNumberish
        deadline: BigNumberish
        nonce: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'forcedWithdraw',
    values: [string, BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(
    functionFragment: 'initPayout',
    values: [
      {
        operator: string
        manager: string
        token: string
        payoutId: BytesLike
        payoutNonce: BigNumberish
        fund: BigNumberish
        startDate: BigNumberish
        endDate: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      }
    ]
  ): string
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'CLAIM_TYPEHASH',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'DOMAIN_SEPARATOR',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getRoleMember',
    values: [BytesLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getRoleMemberCount',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(
    functionFragment: 'INIT_TYPEHASH',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'nonce',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(
    functionFragment: 'numberPayouts',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'OPERATOR_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike]
  ): string

  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'forcedWithdraw',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initPayout', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'CLAIM_TYPEHASH',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'DOMAIN_SEPARATOR',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRoleMember',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRoleMemberCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'INIT_TYPEHASH',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'nonce', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'numberPayouts',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'OPERATOR_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result

  events: {
    'Claimed(uint256,address,bytes32,address,uint256,uint256)': EventFragment
    'ForcedWithdraw(address,uint256,address)': EventFragment
    'Initialized(bytes32,uint256,address,address,uint256,uint256,uint256)': EventFragment
    'Paused(address)': EventFragment
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment
    'RoleGranted(bytes32,address,address)': EventFragment
    'RoleRevoked(bytes32,address,address)': EventFragment
    'Unpaused(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Claimed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ForcedWithdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
}

export type ClaimedEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, BigNumber] & {
    nonce: BigNumber
    user: string
    payoutId: string
    token: string
    amount: BigNumber
    date: BigNumber
  }
>

export type ForcedWithdrawEvent = TypedEvent<
  [string, BigNumber, string] & { token: string; amount: BigNumber; to: string }
>

export type InitializedEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, BigNumber, BigNumber] & {
    payoutId: string
    payoutNonce: BigNumber
    manager: string
    token: string
    fund: BigNumber
    startDate: BigNumber
    endDate: BigNumber
  }
>

export type PausedEvent = TypedEvent<[string] & { account: string }>

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string
    previousAdminRole: string
    newAdminRole: string
  }
>

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>

export type UnpausedEvent = TypedEvent<[string] & { account: string }>

export class Payout extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: PayoutInterface

  functions: {
    claim(
      authorization: {
        operator: string
        user: string
        token: string
        payoutId: BytesLike
        amount: BigNumberish
        deadline: BigNumberish
        nonce: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    forcedWithdraw(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    initPayout(
      authorization: {
        operator: string
        manager: string
        token: string
        payoutId: BytesLike
        payoutNonce: BigNumberish
        fund: BigNumberish
        startDate: BigNumberish
        endDate: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    CLAIM_TYPEHASH(overrides?: CallOverrides): Promise<[string]>

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    INIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>

    nonce(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    numberPayouts(overrides?: CallOverrides): Promise<[BigNumber]>

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>
  }

  claim(
    authorization: {
      operator: string
      user: string
      token: string
      payoutId: BytesLike
      amount: BigNumberish
      deadline: BigNumberish
      nonce: BigNumberish
      v: BigNumberish
      r: BytesLike
      s: BytesLike
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  forcedWithdraw(
    token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  initPayout(
    authorization: {
      operator: string
      manager: string
      token: string
      payoutId: BytesLike
      payoutNonce: BigNumberish
      fund: BigNumberish
      startDate: BigNumberish
      endDate: BigNumberish
      v: BigNumberish
      r: BytesLike
      s: BytesLike
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  CLAIM_TYPEHASH(overrides?: CallOverrides): Promise<string>

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  INIT_TYPEHASH(overrides?: CallOverrides): Promise<string>

  nonce(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  numberPayouts(overrides?: CallOverrides): Promise<BigNumber>

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>

  paused(overrides?: CallOverrides): Promise<boolean>

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>

  callStatic: {
    claim(
      authorization: {
        operator: string
        user: string
        token: string
        payoutId: BytesLike
        amount: BigNumberish
        deadline: BigNumberish
        nonce: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      },
      overrides?: CallOverrides
    ): Promise<void>

    forcedWithdraw(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>

    initPayout(
      authorization: {
        operator: string
        manager: string
        token: string
        payoutId: BytesLike
        payoutNonce: BigNumberish
        fund: BigNumberish
        startDate: BigNumberish
        endDate: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      },
      overrides?: CallOverrides
    ): Promise<void>

    pause(overrides?: CallOverrides): Promise<void>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>

    unpause(overrides?: CallOverrides): Promise<void>

    CLAIM_TYPEHASH(overrides?: CallOverrides): Promise<string>

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    INIT_TYPEHASH(overrides?: CallOverrides): Promise<string>

    nonce(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    numberPayouts(overrides?: CallOverrides): Promise<BigNumber>

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>

    paused(overrides?: CallOverrides): Promise<boolean>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>
  }

  filters: {
    'Claimed(uint256,address,bytes32,address,uint256,uint256)'(
      nonce?: BigNumberish | null,
      user?: string | null,
      payoutId?: BytesLike | null,
      token?: null,
      amount?: null,
      date?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber, BigNumber],
      {
        nonce: BigNumber
        user: string
        payoutId: string
        token: string
        amount: BigNumber
        date: BigNumber
      }
    >

    Claimed(
      nonce?: BigNumberish | null,
      user?: string | null,
      payoutId?: BytesLike | null,
      token?: null,
      amount?: null,
      date?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber, BigNumber],
      {
        nonce: BigNumber
        user: string
        payoutId: string
        token: string
        amount: BigNumber
        date: BigNumber
      }
    >

    'ForcedWithdraw(address,uint256,address)'(
      token?: null,
      amount?: null,
      to?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { token: string; amount: BigNumber; to: string }
    >

    ForcedWithdraw(
      token?: null,
      amount?: null,
      to?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { token: string; amount: BigNumber; to: string }
    >

    'Initialized(bytes32,uint256,address,address,uint256,uint256,uint256)'(
      payoutId?: BytesLike | null,
      payoutNonce?: BigNumberish | null,
      manager?: null,
      token?: null,
      fund?: null,
      startDate?: null,
      endDate?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber, BigNumber, BigNumber],
      {
        payoutId: string
        payoutNonce: BigNumber
        manager: string
        token: string
        fund: BigNumber
        startDate: BigNumber
        endDate: BigNumber
      }
    >

    Initialized(
      payoutId?: BytesLike | null,
      payoutNonce?: BigNumberish | null,
      manager?: null,
      token?: null,
      fund?: null,
      startDate?: null,
      endDate?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber, BigNumber, BigNumber],
      {
        payoutId: string
        payoutNonce: BigNumber
        manager: string
        token: string
        fund: BigNumber
        startDate: BigNumber
        endDate: BigNumber
      }
    >

    'Paused(address)'(
      account?: null
    ): TypedEventFilter<[string], { account: string }>

    Paused(account?: null): TypedEventFilter<[string], { account: string }>

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >

    'Unpaused(address)'(
      account?: null
    ): TypedEventFilter<[string], { account: string }>

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>
  }

  estimateGas: {
    claim(
      authorization: {
        operator: string
        user: string
        token: string
        payoutId: BytesLike
        amount: BigNumberish
        deadline: BigNumberish
        nonce: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    forcedWithdraw(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    initPayout(
      authorization: {
        operator: string
        manager: string
        token: string
        payoutId: BytesLike
        payoutNonce: BigNumberish
        fund: BigNumberish
        startDate: BigNumberish
        endDate: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    CLAIM_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    INIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>

    nonce(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    numberPayouts(overrides?: CallOverrides): Promise<BigNumber>

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    claim(
      authorization: {
        operator: string
        user: string
        token: string
        payoutId: BytesLike
        amount: BigNumberish
        deadline: BigNumberish
        nonce: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    forcedWithdraw(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    initPayout(
      authorization: {
        operator: string
        manager: string
        token: string
        payoutId: BytesLike
        payoutNonce: BigNumberish
        fund: BigNumberish
        startDate: BigNumberish
        endDate: BigNumberish
        v: BigNumberish
        r: BytesLike
        s: BytesLike
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    CLAIM_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    INIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    nonce(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    numberPayouts(overrides?: CallOverrides): Promise<PopulatedTransaction>

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
