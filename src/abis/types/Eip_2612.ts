/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent
} from './common'

export interface Eip_2612Interface extends utils.Interface {
  functions: {
    'nonces(address)': FunctionFragment
    'DOMAIN_SEPARATOR()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic: 'nonces' | 'DOMAIN_SEPARATOR'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'nonces', values: [string]): string
  encodeFunctionData(
    functionFragment: 'DOMAIN_SEPARATOR',
    values?: undefined
  ): string

  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'DOMAIN_SEPARATOR',
    data: BytesLike
  ): Result

  events: {}
}

export interface Eip_2612 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: Eip_2612Interface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>
  }

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>

  callStatic: {
    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>
  }

  filters: {}

  estimateGas: {
    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
