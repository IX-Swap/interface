/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent
} from './common'

export interface IxsFaucetAbiInterface extends utils.Interface {
  functions: {
    'deleteAddrFromWhitelist(address)': FunctionFragment
    'faucet()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setAddrToWhitelist(address)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'erc20Address()': FunctionFragment
    'getStatusAddrFromWhitelist(address)': FunctionFragment
    'getTimeToFaucet()': FunctionFragment
    'owner()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'deleteAddrFromWhitelist'
      | 'faucet'
      | 'renounceOwnership'
      | 'setAddrToWhitelist'
      | 'transferOwnership'
      | 'erc20Address'
      | 'getStatusAddrFromWhitelist'
      | 'getTimeToFaucet'
      | 'owner'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'deleteAddrFromWhitelist',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'faucet', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'setAddrToWhitelist',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'erc20Address',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getStatusAddrFromWhitelist',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'getTimeToFaucet',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string

  decodeFunctionResult(
    functionFragment: 'deleteAddrFromWhitelist',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'faucet', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setAddrToWhitelist',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'erc20Address',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getStatusAddrFromWhitelist',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTimeToFaucet',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result

  events: {
    'Faucet(address,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Whitelist(address)': EventFragment
    'WhitelistRemovedAddress(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Faucet'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Whitelist'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WhitelistRemovedAddress'): EventFragment
}

export interface FaucetEventObject {
  to: string
  amount: BigNumber
}
export type FaucetEvent = TypedEvent<[string, BigNumber], FaucetEventObject>

export type FaucetEventFilter = TypedEventFilter<FaucetEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>

export interface WhitelistEventObject {
  whitelistAddress: string
}
export type WhitelistEvent = TypedEvent<[string], WhitelistEventObject>

export type WhitelistEventFilter = TypedEventFilter<WhitelistEvent>

export interface WhitelistRemovedAddressEventObject {
  whitelistAddress: string
}
export type WhitelistRemovedAddressEvent = TypedEvent<
  [string],
  WhitelistRemovedAddressEventObject
>

export type WhitelistRemovedAddressEventFilter =
  TypedEventFilter<WhitelistRemovedAddressEvent>

export interface IxsFaucetAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: IxsFaucetAbiInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    deleteAddrFromWhitelist(
      _whitelistAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    faucet(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setAddrToWhitelist(
      _whitelistAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    erc20Address(overrides?: CallOverrides): Promise<[string]>

    getStatusAddrFromWhitelist(
      _whitelistAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    getTimeToFaucet(overrides?: CallOverrides): Promise<[BigNumber]>

    owner(overrides?: CallOverrides): Promise<[string]>
  }

  deleteAddrFromWhitelist(
    _whitelistAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  faucet(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setAddrToWhitelist(
    _whitelistAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  erc20Address(overrides?: CallOverrides): Promise<string>

  getStatusAddrFromWhitelist(
    _whitelistAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  getTimeToFaucet(overrides?: CallOverrides): Promise<BigNumber>

  owner(overrides?: CallOverrides): Promise<string>

  callStatic: {
    deleteAddrFromWhitelist(
      _whitelistAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    faucet(overrides?: CallOverrides): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    setAddrToWhitelist(
      _whitelistAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    erc20Address(overrides?: CallOverrides): Promise<string>

    getStatusAddrFromWhitelist(
      _whitelistAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    getTimeToFaucet(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>
  }

  filters: {
    'Faucet(address,uint256)'(to?: null, amount?: null): FaucetEventFilter
    Faucet(to?: null, amount?: null): FaucetEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter

    'Whitelist(address)'(whitelistAddress?: null): WhitelistEventFilter
    Whitelist(whitelistAddress?: null): WhitelistEventFilter

    'WhitelistRemovedAddress(address)'(
      whitelistAddress?: null
    ): WhitelistRemovedAddressEventFilter
    WhitelistRemovedAddress(
      whitelistAddress?: null
    ): WhitelistRemovedAddressEventFilter
  }

  estimateGas: {
    deleteAddrFromWhitelist(
      _whitelistAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    faucet(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setAddrToWhitelist(
      _whitelistAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    erc20Address(overrides?: CallOverrides): Promise<BigNumber>

    getStatusAddrFromWhitelist(
      _whitelistAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTimeToFaucet(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    deleteAddrFromWhitelist(
      _whitelistAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    faucet(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setAddrToWhitelist(
      _whitelistAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    erc20Address(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getStatusAddrFromWhitelist(
      _whitelistAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getTimeToFaucet(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
