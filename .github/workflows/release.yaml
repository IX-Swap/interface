name: Release - build & deploy


env:
  CI: "true"
  AWS_REGION: "ap-southeast-1"
  AWS_APP_NAME: "ix-swap-web"
  AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
  AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
#  AWS_SSM_PARAMETER_NAME: "/NODE-ENV/PRODUCTION/IXS-INTERFACE"
#  AWS_CF_DISTRIBUTION: "${{ secrets.AWS_CF_DISTRIBUTION }}"
#  AWS_BUCKET_NAME: "${{ secrets.AWS_BUCKET_NAME }}"
  NPM_REG_ATUH_TOKEN: "${{ secrets.NPM_REG_ATUH_TOKEN }}"
  GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

on:
  push:
    branches:
      - main
      - ci

jobs:
#  bump_version:
#    name: Bump Version
#    runs-on: ubuntu-latest
#    outputs:
#      new_tag: ${{ steps.github_tag_action.outputs.new_tag }}
#      changelog: ${{ steps.github_tag_action.outputs.changelog }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Bump version and push tag
#        id: github_tag_action
#        uses: mathieudutour/github-tag-action@331898d5052eedac9b15fec867b5ba66ebf9b692
#        with:
#          github_token: ${{ env.GITHUB_TOKEN }}
#          release_branches: .*

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
#    needs: bump_version
#    if: ${{ needs.bump_version.outputs.new_tag != null }}
    env:
      ENVIRONMENT: "production"
    steps:

#      - name: Install aws cli
#        id: install-aws-cli
#        uses: unfor19/install-aws-cli-action@master
      - name: Config terraform
        run: |
          mkdir $HOME/terraform/  && \
          curl  -v -k -L https://releases.hashicorp.com/terraform/0.12.26/terraform_0.12.26_linux_amd64.zip -o  $HOME/terraform/terraform_0.12.26_linux_amd64.zip  && \
          unzip  $HOME/terraform/terraform_0.12.26_linux_amd64.zip -d  $HOME/terraform/  && \
          cp -fv $HOME/terraform/terraform /usr/local/bin/  && \
          terraform --version

      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: 14.17
          registry-url: https://registry.npmjs.org

      - name: create .npmrc file
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc

#      - name: Update .env variables
#        run: |
#          if [[ -f .env ]]; then rm -v .env; else echo " File .env not found!!!"; fi && \
#          if [[ -f ".env.${{ env.ENVIRONMENT }}" ]]; then cp -v .env.${{ env.ENVIRONMENT }}; else echo " File .env.${{ env.ENVIRONMENT }} not found!!!"; fi

      - name: Create .env using AWS SSM Paramter Store
        run: |
          export CI=${{ env.CI }} AWS_REGION=${{ env.AWS_REGION }}  AWS_APP_NAME=${{ env.AWS_APP_NAME }} ENVIRONMENT=${{ env.ENVIRONMENT }}
          rm -fv .env*          && \
          chmod +x bin/*.sh     && \
          bin/tf-ssm-env-file.sh

      - name: Install dep's & build
        run: |
          export CI=false   && \
          yarn install --frozen-lockfile  &&\
          npm ls babel-loader
          yarn run build

      - name: Sync AWS S3 Bucket
        run: |
          export CI=${{ env.CI }}
          chmod +x bin/*.sh
          bin/tf-init.sh
          bin/s3-web-sync.sh

#      - name: Sync AWS S3 Bucket
#        run: |
#          aws s3 sync build/ s3://${{ env.AWS_BUCKET_NAME }}/ --acl public-read --delete
#          aws s3api put-bucket-versioning --bucket ${{ env.AWS_BUCKET_NAME }} --versioning-configuration Status=Enabled
#          aws s3 website s3://${{ env.AWS_BUCKET_NAME }}/ --index-document index.html
#          aws cloudfront create-invalidation --distribution-id ${{ env.AWS_CF_DISTRIBUTION }} --paths "/*"

